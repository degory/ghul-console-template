# CI/CD pipeline. 

name: CICD

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true

  pull_request:
  push:
    branches: [master, main]

env:
  CI: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1

jobs:
  version:
    name: Create a version number
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      tag: ${{ steps.create_version.outputs.tag }}
      package: ${{ steps.create_version.outputs.package }}

    permissions:
      contents: 'write'      

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'    

    - name: Create version
      id: create_version
      uses: degory/create-version@v0.0.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      env:
        PRERELEASE: ${{ github.event_name == 'pull_request' }}

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest

    container: 
      image: mcr.microsoft.com/dotnet/sdk:8.0

    timeout-minutes: 5
    needs: [version]

    steps:
    - uses: actions/checkout@v3

    - name: Restore local tools
      run: dotnet tool restore

    - name: Run unit tests
      run: dotnet test unit-tests

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest

    container: 
      image: mcr.microsoft.com/dotnet/sdk:8.0

    timeout-minutes: 5
    needs: [version]

    steps:
    - uses: actions/checkout@v3

    - name: .NET tool restore
      run: dotnet tool restore

    - name: Build
      run: dotnet build

    - name: Run
      id: run
      run: |
        STDOUT=$(dotnet run)
        echo "::set-output name=stdout::${STDOUT}"

    - name: Test
      run: |
        if [ "${STDOUT}" != "Hello world!" ] ; then
          exit 1
        fi

      env:
        STDOUT: ${{ steps.run.outputs.stdout }}

  build:
    name: Build the package
    runs-on: ubuntu-latest

    container:
      image: mcr.microsoft.com/dotnet/sdk:8.0

    timeout-minutes: 10
    needs: [version]

    steps:
    - uses: actions/checkout@v3

    - name: .NET tool restore
      run: dotnet tool restore

    - name: Create package
      run: dotnet pack -p:Version=${{ needs.version.outputs.package }}

    - name: Upload .NET package artefact
      uses: actions/upload-artifact@v4
      with:
        name: package
        path: nupkg

  package-tests:
    name: Test the package
    runs-on: ubuntu-latest

    container: 
      image: mcr.microsoft.com/dotnet/sdk:8.0

    timeout-minutes: 10
    needs: [version,build]

    steps:
    - uses: actions/checkout@v3

    - name: Download template package
      uses: actions/download-artifact@v4
      with:
        name: package
        path: nupkg

    # TODO: add actual package tests here

  publish-package:
    name: Publish the package
    runs-on: ubuntu-latest

    container: 
      image: mcr.microsoft.com/dotnet/sdk:8.0

    timeout-minutes: 10
    needs: [build, unit-tests, integration-tests, package-tests]

    steps:
    - uses: actions/checkout@v3

    - name: Download template package
      uses: actions/download-artifact@v4
      with:
        name: package
        path: nupkg

    - name: |
        "TODO: configure for your NuGet feeds" 
      run: |
        echo "TODO: configure the 'publish package' job in .github/workflows/cicd.yml"

    # TODO: to push the built package to GitHub replace 'your-github-username' with your GitHub
    # user name and uncomment this step:
    # - name: Publish package to GitHub
    #  if: ${{ github.actor != 'dependabot[bot]' }}
    #  run: dotnet nuget push ./nupkg/*.nupkg -k ${GITHUB_TOKEN} -s https://nuget.pkg.github.com/your-github-username/index.json --skip-duplicate --no-symbols true
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # TODO: to push the built package to NuGet, add a GitHub Actions secret named NUGET_TOKEN and
    # holding a suitable NuGet.org PAT, and then uncomment this step: 
    # - name: Publish package to NuGet
    #   if: ${{ github.event_name == 'push' }}
    #   run: dotnet nuget push ./nupkg/*.nupkg -k ${NUGET_TOKEN} -s https://api.nuget.org/v3/index.json --skip-duplicate --no-symbols true
    #   env:
    #     NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}

  create-release:
    needs: [version, publish-package]
    name: Create release
    runs-on: ubuntu-20.04

    timeout-minutes: 5
    if: ${{ github.event_name == 'push' }}

    steps:
    - uses: actions/checkout@v3

    - name: Download package
      uses: actions/download-artifact@v4
      with:
        name: package
        path: nupkg

    - name: Create changelog
      run: git log -1 --format="%s%n%n%b%n%n" >changelog.txt

    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version.outputs.tag }}
        release_name: ${{ needs.version.outputs.tag }}
        body_path: changelog.txt
        draft: false

    - name: Upload package asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nupkg/example-package.${{ needs.version.outputs.package }}.nupkg
        asset_name: example-package.${{ needs.version.outputs.package }}.nupkg
        asset_content_type: application/octet-stream